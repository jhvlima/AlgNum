# Reposiório da disciplina de Algorítmos Numéricos
## Ferramentas
Para instalar o octave: 
```bash
sudo apt install octave
```

Para usar o octave na ferramenta gráfica: 
```bash
octave --gui
```

Para visualizar os algoritmos, ir no diretório `vizaulizacao` e executar
```bash
python3 interpolacaoNewton.py 
```

# Conteúdo P1
## Capítulo 2

## Capítulo 3
## Interpolação
## 
### Estudo do Erro
> 5.4 Reggero e Lopes, 2009 - Teo. 2 e 3

Existe uma fórmula exata para o erro mas, não é possivel conhecer a função usada na fórmula.
Essa parte desconhecida é igual a diferença dividida, que ainda não conhecemos.
Entretanto é possivel fazer uma aproximação da diferença dividida.
Tendo construido a tabela de diferencas divididas para a ordem `n+1`,usa-se o maior valor em módulo dessas difernças divididas para estimatimar o termo do erro.

> [Visualizador](visualizacao/estimaErro.py)


# Contúdo P2
## Capítulo @
## Integração Numérica
### Regra do Trapésio (polinomio e grau n=1)
Visualização da Regra do Trapésio no Octave
```mathlab
f = @(x) sin(x);
a = 0; b = pi;
n = 5;
x = linspace(a, b, n+1);
y = f(x);

% Aproximação pela regra do trapézio composta
h = (b - a) / n;
I = (h/2) * (y(1) + 2*sum(y(2:end-1)) + y(end));
fprintf("Aproximação da integral: %.6f\n", I);

% Visualização gráfica
xx = linspace(a, b, 1000);
yy = f(xx);
plot(xx, yy, 'b-', 'LineWidth', 2); hold on;

% Desenhar os trapézios
for i = 1:n
  fill([x(i) x(i) x(i+1) x(i+1)], [0 y(i) y(i+1) 0], 'r', 'FaceAlpha', 0.3);
end

plot(x, y, 'ko-');  % pontos usados
title('Regra do Trapézio');
xlabel('x'); ylabel('f(x)');
 legend('f(x)', 'Trapézios');
grid on;

```

### Regra do 1/3 de Simposon (polinomio de grau n=2)
Visualização no Octave
```
f = @(x) sin(x);
a = 0; b = pi;
n = 6; % deve ser par
x = linspace(a, b, n+1);
y = f(x);

% Aproximação por Simpson 1/3 composta
h = (b - a)/n;
I = (h/3) * (y(1) + 2*sum(y(3:2:end-1)) + 4*sum(y(2:2:end)) + y(end));
fprintf("Aproximação da integral (Simpson 1/3): %.6f\n", I);

% Visualização
xx = linspace(a, b, 1000);
yy = f(xx);
plot(xx, yy, 'b-', 'LineWidth', 2); hold on;
plot(x, y, 'ko-');

for i = 1:2:n-1
  xx_local = linspace(x(i), x(i+2), 100);
  % Interpolar parabólica com 3 pontos
  p = polyfit(x(i:i+2), y(i:i+2), 2);
  yy_local = polyval(p, xx_local);
  fill([xx_local fliplr(xx_local)], [yy_local zeros(1,length(yy_local))], 'g', 'FaceAlpha', 0.3);
end

title('Regra de Simpson 1/3');
xlabel('x'); ylabel('f(x)');
legend('f(x)', 'Pontos', 'Parábolas');
grid on;
```

### Fórmula geral de Newton-Cotess (polinomio de grau n)
Depois de grau 3 sofre erros de arredomdamento
Visualização no Octave
```
f = @(x) sin(x);
a = 0; b = pi;
n = 4; % grau do polinômio
x = linspace(a, b, n+1);
y = f(x);
h = (b - a) / n;

% Pesos para Newton-Cotes fechado
switch n
  case 1
    w = [1 1];            c = h/2;
  case 2
    w = [1 4 1];          c = h/3;
  case 3
    w = [1 3 3 1];        c = 3*h/8;
  case 4
    w = [7 32 12 32 7];   c = 2*h/45;
  otherwise
    error('n não suportado!');
end

I = c * sum(w .* y);
fprintf("Aproximação da integral (Newton-Cotes grau %d): %.6f\n", n, I);

```
### Comparação do Erro
O erro de um 
